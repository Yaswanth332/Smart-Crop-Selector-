# Generated by Django 5.1.5 on 2025-07-25 15:31

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('soil_texture', models.CharField(choices=[('Loam', 'Loam'), ('Clay', 'Clay'), ('Sandy', 'Sandy'), ('Clay Loam', 'Clay Loam'), ('Sandy Loam', 'Sandy Loam')], max_length=50)),
                ('soil_ph', models.FloatField()),
                ('organic_matter', models.CharField(choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], max_length=10)),
                ('drainage_status', models.CharField(choices=[('Well-drained', 'Well-drained'), ('Moderately drained', 'Moderately drained'), ('Poorly drained', 'Poorly drained')], max_length=20)),
                ('soil_salinity', models.BooleanField(default=False)),
                ('rainfall_mm', models.FloatField()),
                ('avg_temperature', models.FloatField()),
                ('humidity_level', models.IntegerField(blank=True, null=True)),
                ('frost_risk', models.BooleanField(default=False)),
                ('irrigation_type', models.CharField(choices=[('Canal', 'Canal'), ('Borewell', 'Borewell'), ('Rainfed', 'Rainfed'), ('None', 'None')], max_length=20)),
                ('water_holding_capacity', models.FloatField(blank=True, null=True)),
                ('field_size', models.FloatField(help_text='In acres or hectares')),
                ('sowing_season', models.CharField(choices=[('Kharif', 'Kharif'), ('Rabi', 'Rabi'), ('Zaid', 'Zaid')], max_length=10)),
                ('previous_crop', models.CharField(max_length=50)),
                ('crop_type_preference', models.CharField(blank=True, choices=[('Cereal', 'Cereal'), ('Pulse', 'Pulse'), ('Oilseed', 'Oilseed'), ('Vegetable', 'Vegetable'), ('Fruit', 'Fruit')], max_length=20, null=True)),
                ('district', models.CharField(max_length=50)),
                ('village', models.CharField(blank=True, max_length=50, null=True)),
                ('pin_code', models.CharField(blank=True, max_length=10, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('market_access', models.CharField(blank=True, max_length=100, null=True)),
                ('mechanized', models.BooleanField(default=False)),
                ('risk_appetite', models.CharField(blank=True, choices=[('Stable', 'Stable'), ('High-Profit', 'High-Profit')], max_length=50, null=True)),
                ('language_preference', models.CharField(blank=True, max_length=20, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CropMaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('soil_texture', models.CharField(choices=[('Loam', 'Loam'), ('Clay', 'Clay'), ('Sandy', 'Sandy'), ('Clay Loam', 'Clay Loam'), ('Sandy Loam', 'Sandy Loam')], max_length=50)),
                ('ph_min', models.FloatField()),
                ('ph_max', models.FloatField()),
                ('organic_matter', models.CharField(choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], max_length=10)),
                ('drainage', models.CharField(choices=[('Well-drained', 'Well-drained'), ('Moderately drained', 'Moderately drained'), ('Poorly drained', 'Poorly drained')], max_length=30)),
                ('rainfall_min', models.FloatField()),
                ('rainfall_max', models.FloatField()),
                ('temperature_min', models.FloatField()),
                ('temperature_max', models.FloatField()),
            ],
        ),
    ]
